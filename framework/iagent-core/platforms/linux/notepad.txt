
int create_tcp_socket(const uint16_t port_str, const int address_family, int sock)
{
    struct sockaddr_in server;
    int ret;

    if (-1 != (int)sock)
    {
        close(sock);
        sock = -1;
    }
    if (0/*timeout*/)
    {
        sock = -1;
        return sock;
    }

    // create sockt
    sock = socket (AF_INET, SOCK_STREAM | SOCK_CLOEXEC, 0);
    if (sock < 0)
    {
        fprintf(stderr, "Error opening socket_coap_ep: %d\r\n", errno);
        return -1;
    }

    // Remote address to the server
    struct hostent* nlp_host;
    // Get the IP address from domain name
    if ((nlp_host = gethostbyname (SERVER_IP)) == NULL)
    {
        // WARNING("Failed to get IP address from cloud server domain name(%s), try again in 10 seconds...");
        return -1;
    }
    else
    {
        server.sin_addr.s_addr = ((struct in_addr*)(nlp_host->h_addr))->s_addr;
        server.sin_family = address_family;
        server.sin_port = htons (port_str);

        if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
        {
            // connect failed
            return -1;
        }
        else
        {
            // connect success
            return sock;
        }
    }
}

int recv_from_tcp(const uint16_t port_str, const int address_family, int sock, char* buffer)
{
    int recv_size;

    recv_size = (int)recv (sock, buffer, MAX_PACKET_SIZE, 0);
    if(recv_size == 0)
    {
        sock = create_tcp_socket(port_str, address_family, sock);
        if (sock < 0)
        {
            fprintf(stderr, "Error receiving port%d: %d\r\n", port_str, errno);
            return -1;
        }
        else
            return 1;

    }
    else if(recv_size < 0)
    {
        if(errno == ECONNRESET)
        {
            sock = create_tcp_socket(port_str, address_family, sock);
            if (sock < 0)
            {
                fprintf(stderr, "Error receiving port%d: %d\r\n", port_str, errno);
                return -1;
            }
            else
                return 1;
        }
        else
            return -1;
    }
    else
        return recv_size;

}
